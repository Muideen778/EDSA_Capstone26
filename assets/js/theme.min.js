"use strict";

const HSCore = {
  init: () => {
    [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]')).map((function (e) {
      return new bootstrap.Tooltip(e);
    }));

    [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]')).map((function (e) {
      return new bootstrap.Popover(e);
    }));
  },
  components: {}
};

HSCore.init();

const validators = {
  "data-hs-validation-equal-field": e => {
    document.querySelector(e.getAttribute("data-hs-validation-equal-field"));
  }
};

const HSBsValidation = {
  init(e, t) {
    var i = document.querySelectorAll(e);
    return Array.prototype.slice.call(i).forEach((e => {
      for (const t in validators)
        Array.prototype.slice.call(e.querySelectorAll(`[${t}]`)).forEach(validators[t]);

      e.addEventListener("submit", (i => {
        if (e.checkValidity())
          this.onSubmit({
            event: i,
            form: e,
            options: t
          });
        else {
          i.preventDefault();
          i.stopPropagation();
        }
        e.classList.add("was-validated");
      }), !1);
    })), this;
  },
  onSubmit: e => {
    if (e.options && typeof e.options.onSubmit === "function")
      return e.options.onSubmit(e);
  }
};

HSCore.components.HSList = {
  dataAttributeName: "data-hs-list-options",
  defaults: {
    searchMenu: !1,
    searchMenuDelay: 300,
    searchMenuOutsideClose: !0,
    searchMenuInsideClose: !0,
    clearSearchInput: !0,
    keyboard: !1,
    empty: !1
  },
  collection: [],
  init: function (e, t, i) {
    const l = this;
    let n;
    n = e instanceof HTMLElement ? [e] : e instanceof Object ? e : document.querySelectorAll(e);

    for (let e = 0; e < n.length; e += 1)
      l.addToCollection(n[e], t, i || n[e].id);

    return !!l.collection.length && (l._init(), this);
  },
  initializeHover: function (e, t, i) {
    const l = this;
    var n = e.querySelector(`.${i.searchClass}`),
      o = !1;

    n.addEventListener("keydown", (s => {
      if (s.which === 40) {
        s.preventDefault();
        l.searchMenuShow(e, t, i);
        var a = i.list.querySelector(".active");

        if (a) {
          if (a.nextElementSibling) {
            var c = a.nextElementSibling;
            c.classList.add("active");
            o.classList.remove("active");
            o = c;

            if (i.list.offsetHeight < c.getBoundingClientRect().top) {
              i.list.scrollTop = c.getBoundingClientRect().top + i.list.scrollTop;
            }
          }
        } else {
          o = i.list.firstChild;
          o.classList.add("active");
        }
      } else if (s.which === 38) {
        s.preventDefault();
        var a = i.list.querySelector(".active");

        if (a) {
          if (a.previousElementSibling) {
            var c = a.previousElementSibling;
            c.classList.add("active");
            o.classList.remove("active");
            o = c;

            if (c.getBoundingClientRect().top < 0) {
              i.list.scrollTop = c.getBoundingClientRect().top + i.list.scrollTop - i.list.offsetHeight;
            }
          }
        } else {
          o = i.list.firstChild.parentNode;
          o.classList.add("active");
        }
      } else if (s.which === 13 && n.value.length > 0) {
        s.preventDefault();
        const e = o.querySelector("a").getAttribute("href");
        e && (window.location = e);
      }
    }));
  },
  searchMenu: function (e, t, i) {
    const l = this;

    if (0 === e.querySelector(`.${i.searchClass}`).value.length || (0 === i.visibleItems.length && !t.empty))
      return l.helpers.fadeOut(i.list, t.searchMenuDelay), l.helpers.hide(t.empty);

    l.searchMenuShow(e, t, i);
  },
  searchMenuShow: function (e, t, i) {
    const l = this;

    if (l.helpers.fadeIn(i.list, t.searchMenuDelay), !i.visibleItems.length) {
      var n = l.helpers.show(document.querySelector(t.empty).cloneNode(!0));
      i.list.innerHTML = n.outerHTML;
    }
  },
  searchMenuHide: function (e, t, i) {
    const l = this;
    var n = e.querySelector(`.${i.searchClass}`);

    if (t.searchMenuOutsideClose)
      document.addEventListener("click", (() => {
        l.helpers.fadeOut(i.list, t.searchMenuDelay);

        if (t.clearSearchInput)
          n.value = "";
      }));

    if (!t.searchMenuInsideClose)
      i.list.addEventListener("click", (e => {
        e.stopPropagation();

        if (t.clearSearchInput)
          n.val("");
      }));
  },
  emptyBlock: function (e, t, i) {
    const l = this;

    if (0 === e.querySelector(`.${i.searchClass}`).value.length || (0 === i.visibleItems.length && !t.empty))
      l.helpers.hide(t.empty);
    else if (l.helpers.fadeIn(i.list, t.searchMenuDelay), !i.visibleItems.length) {
      var n = document.querySelector(t.empty).clone();
      l.helpers.show(n);
      i.list.innerHTML = n.outerHTML;
    }
  },
  helpers: {
    fadeIn: (e, t) => {
      if (!e || null !== e.offsetParent)
        return e;

      e.style.opacity = 0;
      e.style.display = "block";

      var i = +new Date;

      var l = () => {
        e.style.opacity = +e.style.opacity + (new Date - i) / t;
        i = +new Date;

        if (+e.style.opacity < 1) {
          window.requestAnimationFrame && requestAnimationFrame(l) || setTimeout(l, 16);
        }
      };

      l();
    },
    fadeOut: (e, t) => {
      if (!e || null === e.offsetParent)
        return e;

      if (!t)
        return e.style.display = "none";

      var i = setInterval((() => {
        e.style.opacity || (e.style.opacity = 1);

        if (e.style.opacity > 0) {
          e.style.opacity -= 0.1;
        } else {
          clearInterval(i);
          e.style.display = "none";
        }
      }), t / 10);
    },
    hide: e => {
      (e = "object" == typeof e ? e : document.querySelector(e)) && (e.style.display = "none");
      return e;
    },
    show: e => {
      (e = "object" == typeof e ? e : document.querySelector(e)) && (e.style.display = "block");
      return e;
    }
  },
  addToCollection(e, t, i) {
    const l = this;
    this.collection.push({
      $el: e,
      id: i || null,
      options: Object.assign({}, l.defaults, e.hasAttribute(l.dataAttributeName) ? JSON.parse(e.getAttribute(l.dataAttributeName)) : {}, t)
    });
  },
  _init() {
    const e = this;

    for (let t = 0; t < e.collection.length; t += 1) {
      if (e.collection[t].hasOwnProperty("$initializedEl"))
        continue;

      const i = e.collection[t].$el;
      const l = e.collection[t].options;
      e.collection[t].$initializedEl = new List(i, l, l.values);

      if (l.searchMenu)
        e.helpers.hide(e.collection[t].$initializedEl.list);

      e.collection[t].$initializedEl.on("searchComplete", (() => {
        if (l.searchMenu) {
          e.searchMenu(i, l, e.collection[t].$initializedEl);
          e.searchMenuHide(i, l, e.collection[t].$initializedEl);
        }

        if (!l.searchMenu && l.empty)
          e.emptyBlock(i, l, e.collection[t].$initializedEl);
      }));

      if (l.searchMenu && l.keyboard)
        e.initializeHover(i, l, e.collection[t].$initializedEl);
    }
  },
  getItem(e) {
    return typeof e === "number" ? this.collection[e].$initializedEl : this.collection.find((t => t.id === e)).$initializedEl;
  }
};
